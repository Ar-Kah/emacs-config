;; UTF-8 everywhere

;; set the default offset to 4 spaces
(setq c-default-style "linux"
      c-basic-offset 4)

;; use home as default directory
(setq default-directory "~/")
(add-hook 'emacs-startup-hook (lambda () (dired default-directory)))

;; downlaod vterm
(use-package vterm
  :ensure t)

;; Start in fullscreen
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Set default zoom / font size
(set-face-attribute 'default nil :height 160)

(with-eval-after-load 'flycheck
  (setq-default flycheck-disabled-checkers '(json-python-json)))

;; Package setup
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu"   . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; Interface tweaks
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(column-number-mode 1)
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

;; Smooth scrolling
(setq scroll-conservatively 101
      scroll-margin 3
      scroll-step 1
      redisplay-dont-pause t)

(setq evil-want-keybinding nil) 

;; Evil mode (Vim)
(use-package evil
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

;; Autocompletion
(use-package company
  :init
  (global-company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)) ;; Fast suggestions

;; LSP Core
(use-package lsp-mode
  :hook ((c-mode . lsp)
         (c++-mode . lsp))
  :commands lsp
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (setq lsp-prefer-flymake nil
        lsp-completion-provider :capf
        lsp-idle-delay 0.1)
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

;; Optional: LSP UI Enhancements (like docs and sideline)
(use-package lsp-ui
  :commands lsp-ui-mode)

;; Snippets (used by LSP for some completions)
(use-package yasnippet
  :config
  (yas-global-mode 1))

(setq lsp-log-io t) ;; Enable LSP logging

;; C++ compile and run shortcut
(defun compile-and-run-cpp ()
  "Compile and run the current C++ file."
  (interactive)
  (let* ((src (buffer-file-name))
         (exe (concat (file-name-sans-extension src) ".exe")))
    (save-buffer)
    (compile (format "g++ -std=c++17 -O2 -o %s %s && %s" exe src exe))))

(global-set-key (kbd "<f5>") 'compile-and-run-cpp)

;; Custom variables (generated by Emacs customization UI)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(tsdh-dark))
 '(custom-safe-themes
   '("e13beeb34b932f309fb2c360a04a460821ca99fe58f69e65557d6c1b10ba18c7" default))
 '(display-line-numbers-type 'relative)
 '(inhibit-startup-screen t)
 '(package-selected-packages
   '(vterm melpa-upstream-visit yasnippet lsp-ui evil-collection company)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(defun evil-open-below-no-insert ()
  "Insert a blank line below without moving point or entering insert mode."
  (interactive)
  (save-excursion
    (goto-char (line-end-position))
    (insert "\n")))

(defun evil-open-above-no-insert ()
  "Insert a blank line above without moving point or entering insert mode."
  (interactive)
  (save-excursion)
    (beginning-of-line)
    (newline))

;; bind the functions above
(global-set-key (kbd "M-o") 'evil-open-below-no-insert)
(global-set-key (kbd "M-O") 'evil-open-above-no-insert)

;; minibuffer contents delete
(delete-minibuffer-contents)
(define-key minibuffer-local-map (kbd "C-u") 'delete-minibuffer-contents)

(defun toggle-evil-insert-normal ()
  "Toggle between Evil normal and isert state."
  (interactive)
  (if (evil-insert-state-p)
      (evil-normal-state)
    (evil-insert-state)))

;; Bind ยง key globally
(global-set-key (kbd "ยง") 'toggle-evil-insert-normal)
(put 'upcase-region 'disabled nil)

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
